@inject NavigationManager navigationManager
@inject EmpleadoService empleadoService
@inject TipoJefeService tipoJefeService
@inject TipoCiudadService tipoCiudadService

<h3>@Nombre</h3>
<EditForm Model="@oEmpleadoFormCLS" OnValidSubmit="@guardar">

	<DataAnnotationsValidator />

	<div class="mt-3">
		<label>
			Num_Empleado
		</label>
		<InputNumber readonly class="form-control" @bind-Value="oEmpleadoFormCLS.Num_Empleado" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Num_Empleado)" />
	</div>


	<div class="mt-3">
		<label>
			Nombre
		</label>
		<InputText class="form-control" @bind-Value="oEmpleadoFormCLS.Nombre" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Nombre)" />
	</div>


	<div class="mt-3">
		<label>
			Edad
		</label>
		<InputNumber class="form-control" @bind-Value="oEmpleadoFormCLS.Edad" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Edad)" />

	</div>



	<div class="mt-3">
		<label>
			Cargo
		</label>
		<InputText class="form-control" @bind-Value="oEmpleadoFormCLS.Cargo" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Cargo)" />
	</div>
	




	<div class="mt-3">
		<label>Seleccione tipo de Ciudad</label>
		<InputSelect class="form-control" @bind-Value="oEmpleadoFormCLS.idtipociudad">
			<option value="0"> --Seleccione-- </option>

			@foreach (var item in listatipo2)

			{
				<option value="@item.idtipociudad"> @item.nombretipociudad </option>

			}
		</InputSelect>
		<ValidationMessage For="(() => oEmpleadoFormCLS.idtipociudad)" />

	</div>






	<div class="mt-3">
		<label>Seleccione tipo de jefe</label>
		<InputSelect class="form-control" @bind-Value="oEmpleadoFormCLS.idtipojefe">
			<option value="0"> --Seleccione-- </option>

			@foreach (var item in listatipo)

			{
				<option value="@item.idtipojefe"> @item.nombretipojefe </option>

			}
		</InputSelect>
		<ValidationMessage For="(() => oEmpleadoFormCLS.idtipojefe)" />

	</div>






	<div class="mt-3">
		<label>
			Fecha_de_Contrato
		</label>
		<InputDate class="form-control" @bind-Value="oEmpleadoFormCLS.Fecha_de_Contrato" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Fecha_de_Contrato)" />
	</div>


	<div class="mt-3">
		<label>
			Cuota
		</label>
		<InputNumber class="form-control" @bind-Value="oEmpleadoFormCLS.Cuota" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Cuota)" />
	</div>

	<div class="mt-3">
		<label>
			Ventas
		</label>
		<InputNumber class="form-control" @bind-Value="oEmpleadoFormCLS.Ventas" />
		<ValidationMessage For="(() => oEmpleadoFormCLS.Ventas)" />
	</div>

	<div class="mt-3">
		<button type="submit" class="btn btn-success">Guardar</button>
		<button @onclick="@regresar" class="btn btn-danger">Regresar</button>
	</div>


</EditForm>

@code {
	public EmpleadoFormCLS oEmpleadoFormCLS { get; set; } = new EmpleadoFormCLS();

	[Parameter]
	public int Num_empleado { get; set; }
	public string Nombre { get; set; } = "";



	public List<TipoJefeCLS> listatipo { get; set; } = new List<TipoJefeCLS>();
	public List<TipoCiudadCLS> listatipo2 { get; set; } = new List<TipoCiudadCLS>();


	protected override Task OnInitializedAsync()
	{
		listatipo = tipoJefeService.listarTipoJefe();
		listatipo2 = tipoCiudadService.listarTipoCiudad();

		if (Num_empleado == 0) Nombre = "Agregar nombre";
		else
		{
			Nombre = "Editar Empleado";
			oEmpleadoFormCLS = empleadoService.recuperarEmpleadoPorId(Num_empleado);
		}

		return base.OnInitializedAsync();
	}


	private void guardar()
	{
		if (Nombre=="Agregar nombre")
		{
			empleadoService.guardarEmpleado(oEmpleadoFormCLS);
			navigationManager.NavigateTo("empleado");
		}
	}
	private void regresar()
	{
		navigationManager.NavigateTo("empleado");
	}

	
}